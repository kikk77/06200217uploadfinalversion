# Cursor Rules - Telegram营销机器人项目



我还有一个最核心的要求，目前的所有功能，包括评价看板 包括预约流程 包括其中的文字内容 
全部都不要动，核心的文字内容和接口功能我都要保留。！
只可以优化代码。不要对任何内容 任何功能进行删减优化。

## 核心原则
- **极简优先**: 能用简单方案绝不复杂化
- **直接可用**: 生成的代码必须能直接运行，无需修改
- **零配置**: 最少的依赖和配置，开箱即用
- **高并发**: 支持100+用户同时操作不崩溃

## 技术约束（严格遵守）
```
语言: 纯JavaScript (禁用TypeScript)
运行时: Node.js + Express  
数据库: SQLite + better-sqlite3 (同步操作)
Bot库: node-telegram-bot-api
部署: Railway (zero-config)
```

## 项目结构（固定不变）
```
src/
├── app.js              # 主入口
├── bot.js              # Bot逻辑 + 定时任务
├── admin.js            # 管理API
├── scheduler.js        # 定时和触发词
└── database.js         # SQLite操作
public/admin.html       # 管理后台
```

## 数据库设计（4张表固定）
- merchants: 商家信息
- buttons: 按钮配置  
- auto_tasks: 自动发送任务（定时+触发词）
- interactions: 用户交互日志

## 核心功能需求
1. **自动发送**: 定时发送 + 关键词触发回复
2. **用户交互**: 点击按钮 → 跳转私聊 → 发送预设内容
3. **商家绑定**: `/bind <code>` 命令绑定
4. **数据统计**: 记录所有交互，统计点击数
5. **管理后台**: 配置发送任务、管理按钮、查看数据

## 代码要求
- **同步数据库**: 使用better-sqlite3同步API，禁用async/await
- **内存缓存**: 启动时加载所有数据到内存
- **错误处理**: 简单try-catch，程序不能崩溃
- **并发处理**: 使用setImmediate()处理并发请求
- **无加密**: 直接存储用户数据，无隐私保护

## 性能要求
- 数据全部内存缓存
- prepared statements
- 异步处理用户交互
- 批量数据库写入

## 部署配置
- 环境变量: `BOT_TOKEN`, `ADMIN_PASSWORD`
- Railway: 自动检测部署
- SQLite: 本地文件存储

## 关键痛点理解
1. **我要的是能跑的代码，不是教程**
2. **定时发送和触发词是核心功能，必须稳定**
3. **并发处理很重要，不能因为多人点击崩溃**
4. **管理后台要实用，能配置所有功能**
5. **部署要简单，Railway一键部署**

## 回答方式
- 直接给代码，少说废话
- 一次性给完整解决方案
- 代码要能直接复制粘贴使用
- 重点解释核心逻辑，不要基础语法

## 禁止事项
- 不要建议使用TypeScript
- 不要推荐其他数据库
- 不要添加不必要的依赖
- 不要过度工程化
- 不要问我要不要添加XX功能

## 当我说"优化"时，我的意思是
- 提高并发处理能力
- 减少内存使用
- 加快响应速度
- 简化代码逻辑

## 当我说"修复"时，重点关注
- 程序崩溃问题
- 数据库连接问题  
- Telegram API调用失败
- 定时任务不执行

## 当我说"添加功能"时
- 在现有架构基础上扩展
- 保持代码风格一致
- 不破坏现有功能
- 提供完整实现代码