const Database = require('better-sqlite3');
const path = require('path');

// Êï∞ÊçÆÂ∫ìË∑ØÂæÑÈÖçÁΩÆ - ÊîØÊåÅÂ§öÁéØÂ¢ÉÂíåRailway Volume
const nodeEnv = process.env.NODE_ENV || 'development';
const isProduction = nodeEnv === 'production';
const isStaging = nodeEnv === 'staging';
const isDeployment = isProduction || isStaging;

// Êï∞ÊçÆÂ∫ìÊñá‰ª∂ÂêçÊ†πÊçÆÁéØÂ¢ÉÂå∫ÂàÜ
const dbFileName = isStaging ? 'marketing_bot_staging.db' : 'marketing_bot.db';
const dataDir = isDeployment ? '/app/data' : path.join(__dirname, '..', 'data');
const dbPath = path.join(dataDir, dbFileName);

console.log(`üìä Êï∞ÊçÆÂ∫ìÁéØÂ¢É: ${nodeEnv}`);
console.log(`üè∑Ô∏è Êï∞ÊçÆÂ∫ìÊñá‰ª∂: ${dbFileName}`);
console.log(`üìÇ Êï∞ÊçÆÂ∫ìË∑ØÂæÑ: ${dbPath}`);

// Á°Æ‰øùdataÁõÆÂΩïÂ≠òÂú®
const fs = require('fs');
if (!fs.existsSync(dataDir)) {
    console.log(`üìÅ ÂàõÂª∫Êï∞ÊçÆÁõÆÂΩï: ${dataDir}`);
    fs.mkdirSync(dataDir, { recursive: true });
}

// Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÊòØÂê¶Â∑≤Â≠òÂú®
const dbExists = fs.existsSync(dbPath);
console.log(`üíæ Êï∞ÊçÆÂ∫ìÁä∂ÊÄÅ: ${dbExists ? 'Â∑≤Â≠òÂú®' : 'Â∞ÜÂàõÂª∫Êñ∞Êï∞ÊçÆÂ∫ì'}`);

// Êï∞ÊçÆÂ∫ìÊÄßËÉΩ‰ºòÂåñÈÖçÁΩÆ
const db = new Database(dbPath, {
    fileMustExist: false
});

// ÊÄßËÉΩ‰ºòÂåñËÆæÁΩÆ - Ê∑ªÂä†ÈîôËØØÂ§ÑÁêÜ
try {
db.pragma('journal_mode = WAL');
db.pragma('synchronous = NORMAL');
db.pragma('cache_size = 1000');
db.pragma('temp_store = memory');
db.pragma('mmap_size = 268435456'); // 256MB
    console.log('‚úÖ Êï∞ÊçÆÂ∫ìÊÄßËÉΩ‰ºòÂåñËÆæÁΩÆÂÆåÊàê');
} catch (error) {
    console.warn('‚ö†Ô∏è Êï∞ÊçÆÂ∫ìÊÄßËÉΩ‰ºòÂåñËÆæÁΩÆÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§ËÆæÁΩÆ:', error.message);
}

// ÂÜÖÂ≠òÁºìÂ≠òÂ±Ç
const cache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5ÂàÜÈíüÁºìÂ≠ò
const CACHE_CHECK_INTERVAL = 60 * 1000; // ÊØèÂàÜÈíüÊ∏ÖÁêÜ‰∏ÄÊ¨°ËøáÊúüÁºìÂ≠ò

// ÁºìÂ≠òÁÆ°ÁêÜÂáΩÊï∞
function setCache(key, value, ttl = CACHE_TTL) {
    cache.set(key, {
        value,
        expires: Date.now() + ttl
    });
}

function getCache(key) {
    const item = cache.get(key);
    if (!item) return null;
    
    if (Date.now() > item.expires) {
        cache.delete(key);
        return null;
    }
    
    return item.value;
}

function clearExpiredCache() {
    const now = Date.now();
    for (const [key, item] of cache.entries()) {
        if (now > item.expires) {
            cache.delete(key);
        }
    }
}

// ÂÆöÊúüÊ∏ÖÁêÜËøáÊúüÁºìÂ≠ò
setInterval(clearExpiredCache, CACHE_CHECK_INTERVAL);

// È¢ÑÁºñËØëËØ≠Âè•ÁºìÂ≠ò
const preparedStatements = new Map();

function getPreparedStatement(sql) {
    if (!preparedStatements.has(sql)) {
        preparedStatements.set(sql, db.prepare(sql));
    }
    return preparedStatements.get(sql);
}

// ÂàõÂª∫Êï∞ÊçÆÂ∫ìË°®
function initDatabase() {
    console.log('üîß ÂºÄÂßãÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìË°®ÁªìÊûÑ...');
    
    // Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÁâàÊú¨ÔºàÁî®‰∫éÊï∞ÊçÆËøÅÁßªÔºâ
    try {
        db.exec(`
            CREATE TABLE IF NOT EXISTS db_meta (
                key TEXT PRIMARY KEY,
                value TEXT,
                created_at INTEGER DEFAULT (strftime('%s', 'now')),
                updated_at INTEGER DEFAULT (strftime('%s', 'now'))
            )
        `);
        
        const currentVersion = db.prepare('SELECT value FROM db_meta WHERE key = ?').get('db_version')?.value || '1.0.0';
        console.log(`üìã ÂΩìÂâçÊï∞ÊçÆÂ∫ìÁâàÊú¨: ${currentVersion}`);
        
        // ËÆ∞ÂΩïÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñ‰ø°ÊÅØ
        const now = Math.floor(Date.now() / 1000);
        db.prepare('INSERT OR REPLACE INTO db_meta (key, value, updated_at) VALUES (?, ?, ?)').run('last_init', now.toString(), now);
        db.prepare('INSERT OR REPLACE INTO db_meta (key, value, updated_at) VALUES (?, ?, ?)').run('environment', nodeEnv, now);
        
        // ËÆæÁΩÆÊàñÊõ¥Êñ∞Êï∞ÊçÆÂ∫ìÁâàÊú¨Ôºà‰∏çÂú®ËøôÈáåÂº∫Âà∂Êõ¥Êñ∞ÔºåÁî±ËøÅÁßªÁ≥ªÁªüÁÆ°ÁêÜÔºâ
        const versionExists = db.prepare('SELECT COUNT(*) as count FROM db_meta WHERE key = ?').get('db_version').count > 0;
        if (!versionExists) {
            db.prepare('INSERT INTO db_meta (key, value) VALUES (?, ?)').run('db_version', '1.0.0');
            console.log('üìã ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìÁâàÊú¨‰∏∫: 1.0.0');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Êï∞ÊçÆÂ∫ìÁâàÊú¨Ê£ÄÊü•Â§±Ë¥•:', error.message);
    }
    
    // ÁªëÂÆöÁ†ÅË°®
    db.exec(`
        CREATE TABLE IF NOT EXISTS bind_codes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            code TEXT UNIQUE NOT NULL,
            description TEXT,
            used INTEGER DEFAULT 0,
            used_by INTEGER,
            created_at INTEGER DEFAULT (strftime('%s', 'now')),
            used_at INTEGER
        )
    `);

    // Âú∞Âå∫ÈÖçÁΩÆË°®
    db.exec(`
        CREATE TABLE IF NOT EXISTS regions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            sort_order INTEGER DEFAULT 0,
            active INTEGER DEFAULT 1
        )
    `);

    // ÂïÜÂÆ∂Ë°®ÔºàÊâ©Â±ïÁâàÊú¨Ôºâ
    db.exec(`
        CREATE TABLE IF NOT EXISTS merchants (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            teacher_name TEXT,
            region_id INTEGER,
            contact TEXT,
            bind_code TEXT,
            bind_step INTEGER DEFAULT 0,
            bind_data TEXT,
            status TEXT DEFAULT 'active',
            created_at INTEGER DEFAULT (strftime('%s', 'now')),
            FOREIGN KEY (region_id) REFERENCES regions (id)
        )
    `);

    // Ê£ÄÊü•Âπ∂Ê∑ªÂä†Áº∫Â§±ÁöÑÂàó
    try {
        db.exec(`ALTER TABLE merchants ADD COLUMN teacher_name TEXT`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }
    
    try {
        db.exec(`ALTER TABLE merchants ADD COLUMN region_id INTEGER`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }
    
    try {
        db.exec(`ALTER TABLE merchants ADD COLUMN bind_step INTEGER DEFAULT 0`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }
    
    try {
        db.exec(`ALTER TABLE merchants ADD COLUMN bind_data TEXT`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }
    
    try {
        db.exec(`ALTER TABLE merchants ADD COLUMN status TEXT DEFAULT 'active'`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }

    // Ê∑ªÂä†‰ø°ÊÅØÊ®°ÊùøÁõ∏ÂÖ≥Â≠óÊÆµ
    try {
        db.exec(`ALTER TABLE merchants ADD COLUMN advantages TEXT`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }
    
    try {
        db.exec(`ALTER TABLE merchants ADD COLUMN disadvantages TEXT`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }
    
    try {
        db.exec(`ALTER TABLE merchants ADD COLUMN price1 INTEGER`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }
    
    try {
        db.exec(`ALTER TABLE merchants ADD COLUMN price2 INTEGER`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }
    
    try {
        db.exec(`ALTER TABLE merchants ADD COLUMN skill_wash TEXT`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }
    
    try {
        db.exec(`ALTER TABLE merchants ADD COLUMN skill_blow TEXT`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }
    
    try {
        db.exec(`ALTER TABLE merchants ADD COLUMN skill_do TEXT`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }
    
    try {
        db.exec(`ALTER TABLE merchants ADD COLUMN skill_kiss TEXT`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }

    // ÊåâÈíÆË°®
    db.exec(`
        CREATE TABLE IF NOT EXISTS buttons (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            message TEXT,
            merchant_id INTEGER,
            active INTEGER DEFAULT 1,
            click_count INTEGER DEFAULT 0,
            created_at INTEGER DEFAULT (strftime('%s', 'now')),
            FOREIGN KEY (merchant_id) REFERENCES merchants (id)
        )
    `);

    // Ê∂àÊÅØÊ®°ÊùøË°®
    db.exec(`
        CREATE TABLE IF NOT EXISTS message_templates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            content TEXT NOT NULL,
            image_url TEXT,
            buttons_config TEXT,
            created_at INTEGER DEFAULT (strftime('%s', 'now'))
        )
    `);

    // Ëß¶ÂèëËØçË°®
    db.exec(`
        CREATE TABLE IF NOT EXISTS trigger_words (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            word TEXT NOT NULL,
            template_id INTEGER,
            match_type TEXT DEFAULT 'exact',
            chat_id INTEGER NOT NULL,
            active INTEGER DEFAULT 1,
            trigger_count INTEGER DEFAULT 0,
            last_triggered INTEGER DEFAULT 0,
            created_at INTEGER DEFAULT (strftime('%s', 'now')),
            FOREIGN KEY (template_id) REFERENCES message_templates (id)
        )
    `);

    // ÂÆöÊó∂‰ªªÂä°Ë°®
    db.exec(`
        CREATE TABLE IF NOT EXISTS scheduled_tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            template_id INTEGER,
            chat_id INTEGER NOT NULL,
            schedule_type TEXT NOT NULL,
            schedule_time TEXT NOT NULL,
            sequence_order INTEGER DEFAULT 0,
            sequence_delay INTEGER DEFAULT 0,
            active INTEGER DEFAULT 1,
            next_run INTEGER,
            last_run INTEGER,
            created_at INTEGER DEFAULT (strftime('%s', 'now')),
            FOREIGN KEY (template_id) REFERENCES message_templates (id)
        )
    `);

    // Áî®Êà∑‰∫§‰∫íÊó•ÂøóË°®
    db.exec(`
        CREATE TABLE IF NOT EXISTS interactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            button_id INTEGER,
            template_id INTEGER,
            action_type TEXT DEFAULT 'click',
            chat_id INTEGER,
            timestamp INTEGER DEFAULT (strftime('%s', 'now')),
            FOREIGN KEY (button_id) REFERENCES buttons (id),
            FOREIGN KEY (template_id) REFERENCES message_templates (id)
        )
    `);

    // Ê∑ªÂä†Êñ∞Â≠óÊÆµÂà∞Áé∞ÊúâÁöÑinteractionsË°®
    try {
        db.exec(`ALTER TABLE interactions ADD COLUMN first_name TEXT`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }
    
    try {
        db.exec(`ALTER TABLE interactions ADD COLUMN last_name TEXT`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }

    // È¢ÑÁ∫¶Áä∂ÊÄÅË∑üË∏™Ë°®
    db.exec(`
        CREATE TABLE IF NOT EXISTS booking_sessions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            merchant_id INTEGER NOT NULL,
            course_type TEXT NOT NULL,
            status TEXT DEFAULT 'notified',
            user_course_status TEXT DEFAULT 'pending',
            merchant_course_status TEXT DEFAULT 'pending',
            created_at INTEGER DEFAULT (strftime('%s', 'now')),
            updated_at INTEGER DEFAULT (strftime('%s', 'now'))
        )
    `);

    // Ê∑ªÂä†Êñ∞Â≠óÊÆµÂà∞Áé∞ÊúâÁöÑbooking_sessionsË°®
    try {
        db.exec(`ALTER TABLE booking_sessions ADD COLUMN user_course_status TEXT DEFAULT 'pending'`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }
    
    try {
        db.exec(`ALTER TABLE booking_sessions ADD COLUMN merchant_course_status TEXT DEFAULT 'pending'`);
    } catch (e) { /* ÂàóÂ∑≤Â≠òÂú® */ }

    // ËØÑ‰ª∑Ë°®
    db.exec(`
        CREATE TABLE IF NOT EXISTS evaluations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            booking_session_id INTEGER NOT NULL,
            evaluator_type TEXT NOT NULL,
            evaluator_id INTEGER NOT NULL,
            target_id INTEGER NOT NULL,
            overall_score INTEGER,
            detailed_scores TEXT,
            comments TEXT,
            status TEXT DEFAULT 'pending',
            created_at INTEGER DEFAULT (strftime('%s', 'now')),
            FOREIGN KEY (booking_session_id) REFERENCES booking_sessions (id)
        )
    `);

    // Áî®Êà∑ËØÑ‰ª∑Áä∂ÊÄÅË∑üË∏™Ë°®
    db.exec(`
        CREATE TABLE IF NOT EXISTS evaluation_sessions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            evaluation_id INTEGER NOT NULL,
            current_step TEXT DEFAULT 'start',
            temp_data TEXT,
            created_at INTEGER DEFAULT (strftime('%s', 'now')),
            updated_at INTEGER DEFAULT (strftime('%s', 'now')),
            FOREIGN KEY (evaluation_id) REFERENCES evaluations (id)
        )
    `);

    // ËÆ¢ÂçïÁÆ°ÁêÜË°®
    db.exec(`
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            booking_session_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            user_name TEXT NOT NULL,
            user_username TEXT,
            merchant_id INTEGER NOT NULL,
            teacher_name TEXT NOT NULL,
            teacher_contact TEXT,
            course_content TEXT NOT NULL,
            price TEXT,
            booking_time TEXT NOT NULL,
            status TEXT DEFAULT 'confirmed',
            user_evaluation TEXT,
            merchant_evaluation TEXT,
            report_content TEXT,
            created_at TEXT NOT NULL,
            updated_at TEXT NOT NULL,
            FOREIGN KEY (booking_session_id) REFERENCES booking_sessions (id),
            FOREIGN KEY (merchant_id) REFERENCES merchants (id)
        )
    `);

    console.log('‚úÖ Êï∞ÊçÆÂ∫ìË°®ÂàùÂßãÂåñÂÆåÊàê');
    
    // ÊòæÁ§∫Êï∞ÊçÆÂ∫ìÁªüËÆ°‰ø°ÊÅØ
    try {
        const tableCount = db.prepare("SELECT COUNT(*) as count FROM sqlite_master WHERE type='table'").get().count;
        const dbSize = fs.statSync(dbPath).size;
        console.log(`üìä Êï∞ÊçÆÂ∫ìÁªüËÆ°: ${tableCount}‰∏™Ë°®, Êñá‰ª∂Â§ßÂ∞è: ${(dbSize / 1024).toFixed(1)}KB`);
    } catch (error) {
        console.warn('‚ö†Ô∏è Ëé∑ÂèñÊï∞ÊçÆÂ∫ìÁªüËÆ°‰ø°ÊÅØÂ§±Ë¥•:', error.message);
    }
}

// Ë∞ÉÁî®ÂàùÂßãÂåñÂáΩÊï∞
initDatabase();

module.exports = {
    db,
    initDatabase,
    cache: {
        set: setCache,
        get: getCache,
        clear: () => cache.clear(),
        size: () => cache.size
    },
    getPreparedStatement
}; 